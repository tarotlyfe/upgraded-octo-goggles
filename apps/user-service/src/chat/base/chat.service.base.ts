/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Chat, // @ts-ignore
  User,
} from "@prisma/client";

export class ChatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ChatCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatCountArgs>
  ): Promise<number> {
    return this.prisma.chat.count(args);
  }

  async chats<T extends Prisma.ChatFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatFindManyArgs>
  ): Promise<Chat[]> {
    return this.prisma.chat.findMany(args);
  }
  async chat<T extends Prisma.ChatFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatFindUniqueArgs>
  ): Promise<Chat | null> {
    return this.prisma.chat.findUnique(args);
  }
  async createChat<T extends Prisma.ChatCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatCreateArgs>
  ): Promise<Chat> {
    return this.prisma.chat.create<T>(args);
  }
  async updateChat<T extends Prisma.ChatUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatUpdateArgs>
  ): Promise<Chat> {
    return this.prisma.chat.update<T>(args);
  }
  async deleteChat<T extends Prisma.ChatDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatDeleteArgs>
  ): Promise<Chat> {
    return this.prisma.chat.delete(args);
  }

  async getInitiator(parentId: string): Promise<User | null> {
    return this.prisma.chat
      .findUnique({
        where: { id: parentId },
      })
      .initiator();
  }

  async getResponder(parentId: string): Promise<User | null> {
    return this.prisma.chat
      .findUnique({
        where: { id: parentId },
      })
      .responder();
  }
}
